name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ros-distro: [humble, iron]
        compiler: [gcc, clang]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup ROS2 ${{ matrix.ros-distro }}
      uses: ros-tooling/setup-ros@v0.5.0
      with:
        required-ros-distributions: ${{ matrix.ros-distro }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libquill-dev \
          git \
          pkg-config

    - name: Setup compiler
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Build and test
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
        make -j$(nproc)
        ctest --output-on-failure

    - name: Run tests
      run: |
        cd build
        ./test/quill_logger_test_simple
        ./test/quill_logger_test_quill_logger
        ./test/quill_logger_test_quill_logger_interface

  build-deb:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup ROS2 Humble
      uses: ros-tooling/setup-ros@v0.5.0
      with:
        required-ros-distributions: humble

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libquill-dev \
          devscripts \
          debhelper \
          dh-make \
          git \
          pkg-config

    - name: Build Debian package
      run: |
        chmod +x scripts/build_deb.sh
        ./scripts/build_deb.sh

    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: quill-logger-deb
        path: ../*.deb

  test-apt-install:
    runs-on: ubuntu-latest
    needs: build-deb
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup ROS2 Humble
      uses: ros-tooling/setup-ros@v0.5.0
      with:
        required-ros-distributions: humble

    - name: Download Debian package
      uses: actions/download-artifact@v4
      with:
        name: quill-logger-deb
        path: ./deb-packages

    - name: Install Debian package
      run: |
        sudo dpkg -i ./deb-packages/*.deb || true
        sudo apt-get install -f -y

    - name: Test installation
      run: |
        # Test if headers are available
        pkg-config --exists quill_logger
        pkg-config --cflags quill_logger
        pkg-config --libs quill_logger
        
        # Test if library can be linked
        echo '#include <quill_logger/quill_logger.hpp>' > test_install.cpp
        echo 'int main() { return 0; }' >> test_install.cpp
        g++ -o test_install test_install.cpp $(pkg-config --cflags --libs quill_logger)
        ./test_install

    - name: Test demo applications
      run: |
        # Test if demo applications work
        if [ -f /usr/bin/quill_logger_test_node ]; then
          echo "Demo application found"
        else
          echo "Demo application not found"
          exit 1
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup ROS2 Humble
      uses: ros-tooling/setup-ros@v0.5.0
      with:
        required-ros-distributions: humble

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libquill-dev \
          cppcheck \
          clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --xml --xml-version=2 \
          include/ src/ test/ 2> cppcheck-result.xml || true

    - name: Run clang-tidy
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        run-clang-tidy -header-filter='.*' -checks='-*,readability-*,performance-*,modernize-*' || true 